/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    using func=function<ListNode*(ListNode*)>;
    ListNode* doubleIt(ListNode* head) {

        func reverseList=[](ListNode* cur){
            ListNode* prev=NULL;
            while(cur){
                ListNode* next=cur->next;
                cur->next=prev;
                prev=cur;
                cur=next;
            }
            return prev;
        };

        head =reverseList(head);
        
        auto temp=head;
        int carry=0;
        ListNode* prev;
        while(temp){

            carry=(temp->val=(temp->val*2+carry))/10;
            temp->val%=10;
            prev=temp;
            temp=temp->next;
        }
        if(carry){
            prev->next=new ListNode(carry);
        }
        return reverseList(head);

    }
};
