class Solution {
public:
    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {
        unordered_map<int,unordered_set<int>>dic;

        if(n==1)return {0};
        for(auto e:edges){
            dic[e[0]].insert(e[1]);
            dic[e[1]].insert(e[0]);
        }
        vector<int>ans;

        queue<int>q;
        for(auto i:dic){
            if(i.second.size()==1)q.push(i.first);
        }

        while(q.size()){
            ans.clear();
            for(auto i=q.size();i>0;i--){
                auto cur=q.front();
                ans.push_back(cur);
                q.pop();
                for(auto d:dic[cur]){
                    dic[d].erase(cur);
                    if(dic[d].size()==1)q.push(d);
                }
            }
        }
        return ans;
    }
};
